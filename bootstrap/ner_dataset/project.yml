title: "NER dataset annotated in a very standard way"
description: | 

  You're provided with a corpus zip-file, coming from a Kaggle challenge. It is a NER dataset annotated in a very standard way, where each word is associated with its corresponding label.
  The file ner_dataset.csv contains different sentences; each line corresponds to a token with its NER tag. Note that all elements of the sentence are preserved, including commas, periods, etc.
  These are all very important for identifying entities (e.g., "I saw Mr. Poubelle yesterday": In this case, even without the capitalization of “Poubelle,”
  you can guess that it refers to a named entity and not an everyday object). Start by applying a classical NER model like spaCy to get a first idea of the results.
  Then, calculate some more advanced metrics

# Variables can be referenced across the project.yml using ${vars.var_name}
vars:
  name: "ner_dataset"
  version: "0.0.1"
  lang: "en"
  # Choose your GPU here
  gpu_id: -1
  # Change this to "bert" to use the transformer-based model
  config: "cnn"

# These are the directories that the project needs. The project CLI will make
# sure that they always exist.
# mkdir -p assets training configs metrics packages scripts corpus
directories: ["assets", "training", "configs", "metrics", "packages", "scripts", "corpus"]

# Assets that should be downloaded or available in the directory.
# python -m spacy project assets
assets:
  - dest: "assets/ner_dataset.csv"
    url: "../datas/corpus/ner_dataset.csv"
    description: "ner_dataset.csv"
  - dest: "assets/ner.csv"
    url: "../datas/corpus/ner.csv"
    description: "ner.csv"
  - dest: "assets/bottins.csv"
    url: "../datas/bottins.csv"
    description: "bottins.csv"
  # Uncomment this asset if you want to download the vectors.
  #- dest: "assets/vectors.zip"
  #  url: "https://dl.fbaipublicfiles.com/fasttext/vectors-english/crawl-300d-2M.vec.zip"

# Workflows are sequences of commands (see below) executed in order. You can
# run them via "spacy project run [workflow]". If a commands's inputs/outputs
# haven't changed, it won't be re-run.
workflows:
  all:
    - preprocess
    - train
    - evaluate
    - package


# Project commands, specified in a style similar to CI config files (e.g. Azure
# pipelines). The name is the command name that lets you trigger the command
# via "spacy project run [command] [path]". The help message is optional and
# shown when executing "spacy project run [optional command] [path] --help".
commands: 
  - name: preprocess
    help: "Convert the corpus to spaCy's format"
    script:
      - "python scripts/convert_corpus.py"
    deps:
      - "assets/ner_dataset.csv"
    outputs_no_cache:
      - "corpus/train.spacy"
      - "corpus/dev.spacy"
      - "corpus/test.spacy"

  - name: train
    help: "Train a spaCy pipeline using the specified corpus and config"
    script:
      - "python -m spacy train ./configs/${vars.config}.cfg -o training/${vars.config} --gpu-id ${vars.gpu_id}"
    deps:
      - "corpus/train.spacy"
      - "corpus/dev.spacy"
      - "configs/${vars.config}.cfg"
    outputs:
      - "training/${vars.config}/model-best"

  - name: evaluate
    help: "Evaluate on the test data and save the metrics"
    script:
      - "python -m spacy evaluate ./training/${vars.config}/model-best ./corpus/test.spacy --output ./metrics/${vars.config}.json"
    deps:
      - "training/${vars.config}/model-best"
      - "corpus/test.spacy"
    outputs:
      - "metrics/${vars.config}.json"

  - name: package
    help: "Package the trained model so it can be installed"
    script:
      - "python -m spacy package ./training/${vars.config}/model-best packages/ --name ${vars.name} --force --version ${vars.version} --build wheel --meta-path ./training/${vars.config}/model-best/meta.json"
    deps:
      - "training/${vars.config}/model-best"
    outputs_no_cache:
      - "packages/${vars.name}-${vars.version}/dist/${vars.name}-${vars.version}.tar.gz"

  - name: visualize
    help: Visualize the model's output interactively using Streamlit
    script:
      - "streamlit run scripts/visualize_model.py training/${vars.config}/model-best \"I’m sorry to hear that friend :(\""
    deps:
      - "scripts/visualize_model.py"
      - "training/${vars.config}/model-best"