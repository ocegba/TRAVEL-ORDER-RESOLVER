title: ""
description: ""

# Variables can be referenced across the project.yml using ${vars.var_name}
vars:
  config: "config.cfg"
  name: "ner_travel"
  version: "0.0.0"
  train: "travel_training"
  errors: "travel_errors"
  dev: "travel_eval"

# These are the directories that the project needs. The project CLI will make
# sure that they always exist.
# mkdir -p assets training configs metrics packages scripts corpus
directories: ["assets", "training", "configs", "scripts", "corpus", "packages"]

# Assets that should be downloaded or available in the directory. We're shipping
# them with the project, so they won't have to be downloaded. But the
# 'project assets' command still lets you verify that the checksums match.
assets:
  - dest: "assets/${vars.train}.csv"
    url: "https://docs.google.com/spreadsheets/d/e/2PACX-1vRvgPjfK6KwI3MWnPJBdJd5zQ9aW1Uq1R5PAMQHgkB7BQnN3JlLGZnUyxLPjiaTuIAE_SXDROedYhuX/pub?gid=0&single=true&output=csv"
    description: "The training data"
  - dest: "assets/${vars.errors}.csv"
    url: "https://docs.google.com/spreadsheets/d/e/2PACX-1vRvgPjfK6KwI3MWnPJBdJd5zQ9aW1Uq1R5PAMQHgkB7BQnN3JlLGZnUyxLPjiaTuIAE_SXDROedYhuX/pub?gid=481625167&single=true&output=csv"
    description: "The errors"
  - dest: "assets/${vars.dev}.csv"
    url: "https://docs.google.com/spreadsheets/d/e/2PACX-1vRvgPjfK6KwI3MWnPJBdJd5zQ9aW1Uq1R5PAMQHgkB7BQnN3JlLGZnUyxLPjiaTuIAE_SXDROedYhuX/pub?gid=1676785879&single=true&output=csv"
    description: "The evaluate data"
  - dest: "assets/villes.tar.gz"
    url: "https://static.data.gouv.fr/resources/regions-departements-villes-et-villages-de-france-et-doutre-mer/20180802-085038/French-zip-code-3.0.0-CSV.tar.gz"
    description: "Les villes de France"

# Workflows are sequences of commands (see below) executed in order. You can
# run them via "spacy project run [workflow]". If a commands's inputs/outputs
# haven't changed, it won't be re-run.
workflows:
  all:
    - preprocess
    - train
    - evaluate

  create_data:
    - create-data

  visualize_the_model : 
    - visualize-model

  visualize_the_data : 
    - visualize-data

# Project commands, specified in a style similar to CI config files (e.g. Azure
# pipelines). The name is the command name that lets you trigger the command
# via "spacy project run [command] [path]". The help message is optional and
# shown when executing "spacy project run [optional command] [path] --help".
commands:
  - name: "create-data"
    help: "Create the training and the evaluate datas"
    script:
      - "python scripts/create_data.py assets/villes.tar.gz assets/${vars.train}.csv"
      - "python scripts/create_data.py assets/villes.tar.gz assets/${vars.train}.csv"
      - "python scripts/create_data.py assets/villes.tar.gz assets/${vars.dev}.csv"
    deps:
      - "assets/villes.tar.gz"
      - "assets/${vars.train}.csv"
      - "assets/${vars.dev}.csv"

  - name: "preprocess"
    help: "Convert the data to spaCy's binary format"
    script:
      - "python scripts/preprocess.py assets/${vars.train}.csv corpus/${vars.train}.spacy"
      - "python scripts/preprocess.py assets/${vars.dev}.csv corpus/${vars.dev}.spacy"
    deps:
      - "assets/villes.tar.gz"
      - "assets/${vars.train}.csv"
      - "assets/${vars.dev}.csv"
      - "scripts/preprocess.py"
    outputs:
      - "corpus/${vars.train}.spacy"
      - "corpus/${vars.dev}.spacy"

  - name: "train"
    help: "Train a named entity recognition model"
    script:
      - "python -m spacy train configs/${vars.config} --output training/ --paths.train corpus/${vars.train}.spacy --paths.dev corpus/${vars.dev}.spacy"
    deps:
      - "corpus/${vars.train}.spacy"
      - "corpus/${vars.dev}.spacy"
    outputs:
      - "training/model-best"

  - name: "evaluate"
    help: "Evaluate the model and export metrics"
    script:
      - "python -m spacy evaluate training/model-best corpus/${vars.dev}.spacy --output metrics/metrics.json"
    deps:
      - "corpus/${vars.dev}.spacy"
      - "training/model-best"
    outputs:
      - "training/metrics.json"

  - name: package
    help: "Package the trained model so it can be installed"
    script:
      - "python -m spacy package training/model-best packages --name ${vars.name} --version ${vars.version} --force"
    deps:
      - "training/model-best"
    outputs_no_cache:
      - "packages/fr_${vars.name}-${vars.version}/dist/fr_${vars.name}-${vars.version}.tar.gz"

  - name: visualize-model
    help: Visualize the model's output interactively using Streamlit
    script:
      - "streamlit run scripts/visualize_model.py training/model-best \"Je suis allé à Paris en partant de Lyon\""
    deps:
      - "scripts/visualize_model.py"
      - "training/model-best"

  - name: "visualize-data"
    help: "Explore the annotated data in an interactive Streamlit app"
    script:
      - "streamlit run scripts/visualize_data.py assets/${vars.train}.csv,assets/${vars.dev}.csv"
    deps:
      - "scripts/visualize_data.py"
      - "assets/${vars.train}.csv"
      - "assets/${vars.dev}.csv"
